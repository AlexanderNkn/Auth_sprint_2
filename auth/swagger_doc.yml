openapi: 3.0.2

info:
  title: 'Authentication service'
  version: '1.0'

servers:
  - url: /api/v1/

paths:
  /auth/login:
    post:
      tags:
      - LOGIN
      description: Get JWT tokens after login
      requestBody:
        content:
          application/json:
            name: credentials
            description: username/password to get jwt tokens
            schema:
              $ref: '#/components/schemas/Credentials'
            example:
              username: yandex
              password: 12345
      responses:
        200:
          description: A pair of access/refresh tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
                properties:
                  tokens: 
                    $ref: '#/components/schemas/Token'
              example:
                status: success
                message: JWT tokens were generated successfully
                tokens:
                  access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZXN1bHQiOiJZb3UgYXJlIHZlcnkgc21hcnQhIn0.GZvDoQdT9ldwmlPOrZWrpiaHas0DiFmZlytr1dhaxi4
                  refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZXN1bHQiOiJZb3UgYXJlIGF3ZXNvbWUhIn0.PhRXjIVL1yUhAND4uiE-p6V2rXHQ0drCj9156thJAJg
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                status: error
                message: username or password are not correct
  /auth/register:
    post:
      tags:
      - REGISTRATION
      description: Create new user account
      requestBody:
        content:
          application/json:
            name: credentials
            description: username/password for registration
            schema:
              $ref: '#/components/schemas/Credentials'
            example:
              username: yandex
              password: 12345
      responses:
        200:
          description: Successfull registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                status: success
                message: New account was registered successfully
        400:
          description: Registration failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                status: error
                message: The username is already in use
  /auth/logout:
    post:
      tags:
      - LOGOUT
      description: User logout
      responses:
        200:
          description: Logout successfull
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                status: success
                message: User logout successfull
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
      - jwt_auth:
        - write:admin,subscriber,member
  /auth/refresh_token:
    post:
      tags:
      - REFRESH_TOKEN
      description: Refresh expired access token
      responses:
        200:
          description: Successfull refresh tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                status: success
                message: New tokens were generated
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
      - jwt_auth:
        - write:admin,subscriber,member
  /auth/change_password:
    patch:
      tags:
      - CHANGE_PASSWORD
      description: Change user password
      requestBody:
        content:
          application/json:
            name: credentials
            description: password to change
            schema:
              $ref: '#/components/schemas/Passwords'
            example:
              old_password: 12345
              new_password: 678910
      responses:
        200:
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                status: success
                message: password changed successfully
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
      security:
      - jwt_auth:
        - write:admin,subscriber,member
        - read:admin,subscriber,member
  /add_personal_data/<uuid:user_id>:
    parameters:
    - name: user_id
      in: path
      required: true
      description: User id to add personal data
      schema:
        type: string
    post:
      tags:
      - ADD_PERSONAL_DATA
      description: Additional info about user
      requestBody:
        content:
          application/json:
            name: user personal data
            description: user personal data
            schema:
              $ref: '#/components/schemas/UserData'
            example:
              first_name: Matt
              last_name: Damon
              email: matt@damon.com
              birth_date: 1970-10-8
              phone: +71234567
              city: Cambridge
      responses:
        201:
          description: User data was added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                status: success
                message: user personal was data added successfully
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
      security:
      - jwt_auth:
        - write:admin,subscriber,member
        - read:admin,subscriber,member
  /change_personal_data/<uuid:user_id>:
    parameters:
    - name: user_id
      in: path
      required: true
      description: User id to change personal data
      schema:
        type: string
    patch:
      tags:
      - CHANGE_PERSONAL_DATA
      description: Additional info about user
      requestBody:
        content:
          application/json:
            name: user personal data
            description: user personal data
            schema:
              $ref: '#/components/schemas/UserData'
            example:
              first_name: Matt
              last_name: Damon
              email: matt@damon.com
              birth_date: 1970-10-08
              phone: +71234567
              city: Cambridge
      responses:
        200:
          description: User data was changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                status: success
                message: user personal data was changed successfully
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
      security:
      - jwt_auth:
        - write:admin,subscriber,member
        - read:admin,subscriber,member
  /delete_personal_data/<uuid:user_id>:
    parameters:
    - name: user_id
      in: path
      required: true
      description: User id to delete personal data
      schema:
        type: string
    delete:
      tags:
      - DELETE_PERSONAL_DATA
      description: Additional info about user
      responses:
        204:
          description: User data was deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                status: success
                message: user personal data was deleted successfully
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
      security:
      - jwt_auth:
        - write:admin,subscriber,member
        - read:admin,subscriber,member
  /login_history/<uuid:user_id>:
    parameters:
    - name: user_id
      in: path
      required: true
      description: User id to view login history
      schema:
        type: string
    get:
      tags:
      - LOGIN_HISTORY
      description: info about user login
      responses:
        200:
          description: User login history is available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
                properties:
                  history:
                    $ref: '#/components/schemas/UserLoginHistory'
              example:
                status: success
                message: user login history is available
                history:
                  - login_date: 2022-02-06
                    device:
                      ip: 89.100.100.100
                      user_agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36
                      created_at: 2021-02-15
                  - login_date: 2022-02-04
                    device:
                      ip: 89.100.100.100
                      user_agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36
                      created_at: 2021-02-15
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
      security:
      - jwt_auth:
        - write:admin,subscriber,member
        - read:admin,subscriber,member
  /role:
    get:
      tags:
        - ROLE_LIST
      description: List of all available roles
      responses:
        200:
          description: List of roles is available
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/Role'
                example:
                  - id: a9c6e8da-f2bf-458a-978b-d2f50a031451
                    code: admin
                    description: unlimited access to all actions
                  - id: 7cf56926-054c-4522-ac6f-d9f5d0e9d18e
                    code: subscriber
                    description: account without paying for registered users
                  - id: 7166fd5f-a4e4-45f0-952c-78d0297c7b03
                    code: member
                    description: account with payment options
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - CREATE_ROLE
      description: Create new role
      requestBody:
        content:
          application/json:
            name: new role
            description: new role data
            schema:
              $ref: '#/components/schemas/Role'
            example:
              code: admin
              description: unlimited access to all actions
      responses:
        201:
          description: List of roles is available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
                properties:
                  role: 
                    $ref: '#/components/schemas/Role'
              example:
                status: success
                message: New role was created
                role:
                  id: a9c6e8da-f2bf-458a-978b-d2f50a031451
                  code: admin
                  description: unlimited access to all actions
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
      security:
      - jwt_auth:
        - write:admin
        - read:admin
  /role/<uuid:role_id>:
    parameters:
    - name: role_id
      in: path
      required: true
      description: Role uuid
      schema:
        type: string
      example:
        role_id: a9c6e8da-f2bf-458a-978b-d2f50a031451
    get:
      tags:
      - ROLE_DETAILS
      description: detailed info about role
      responses:
        200:
          description: info about role is available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
                properties:
                  role: 
                    $ref: '#/components/schemas/Role'
              example:
                status: success
                message: info about role is available
                role:
                  id: a9c6e8da-f2bf-458a-978b-d2f50a031451
                  code: admin
                  description: unlimited access to all actions
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
      - CHANGE_ROLE_DETAILS
      description: detailed info about role
      responses:
        200:
          description: info about role was changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
                properties:
                  role: 
                    $ref: '#/components/schemas/Role'
              example:
                status: success
                message: info about role was changed successfully
                role:
                  id: a9c6e8da-f2bf-458a-978b-d2f50a031451
                  code: admin
                  description: unlimited access to all actions
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
      - DELETE_ROLE
      description: delete role
      responses:
        204:
          description: role was deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                status: success
                message: role was deleted successfully
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
    security:
      - jwt_auth:
        - write:admin
        - read:admin
  /assign_roles:
    post:
      tags:
        - ASSIGN_ROLES
      description: Assign roles to user
      requestBody:
        content:
          application/json:
            name: roles for user
            description: roles for user
            schema:
              $ref: '#/components/schemas/UserRoleRequest'
            example:
              user_id: 7cd483e9-5888-40fd-813a-a382154bcfd2
              role_ids: [a9c6e8da-f2bf-458a-978b-d2f50a031451, 7cf56926-054c-4522-ac6f-d9f5d0e9d18e]
      responses:
        201:
          description: Roles were assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
                properties:
                  user_roles:
                    $ref: '#/components/schemas/UserRoleResponse'
              example:
                status: success
                message: roles were assigned to user
                user_roles:
                  - id: 4a73b964-af72-4801-aed9-113783561540
                    user_id: 7cd483e9-5888-40fd-813a-a382154bcfd2
                    role_id: a9c6e8da-f2bf-458a-978b-d2f50a031451
                  - id: 0f55b9d8-f027-4766-9476-2b89e17c1854
                    user_id: 7cd483e9-5888-40fd-813a-a382154bcfd2
                    role_id: 7cf56926-054c-4522-ac6f-d9f5d0e9d18e
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                nouser:
                  value:
                    status: error
                    message: user not found
                norole:
                  value:
                    status: error
                    message: role not found
      security:
      - jwt_auth:
        - write:admin
        - read:admin
  /check_permissions:
    post:
      tags:
        - CHECK_PERMISSIONS
      description: check if user belongs to specified roles
      requestBody:
        content:
          application/json:
            name: user and possible roles
            description: user and possible roles
            schema:
              $ref: '#/components/schemas/UserRoleRequest'
            example:
              user_id: 7cd483e9-5888-40fd-813a-a382154bcfd2
              role_ids: [a9c6e8da-f2bf-458a-978b-d2f50a031451, 7cf56926-054c-4522-ac6f-d9f5d0e9d18e]
      responses:
        200:
          description: Roles were checked successfully
          content:
            application/json:
              schema:
                properties:
                status:
                  type: string
                message:
                  type: string
                has_permissions:
                  type: boolean
              examples:
                approved:
                  value:
                    status: success
                    message: roles were checked successfully
                    has_permissions: true
                disapproved:
                  value:
                    status: success
                    message: roles were checked successfully
                    has_permissions: false
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                nouser:
                  value:
                    status: error
                    message: user not found
                norole:
                  value:
                    status: error
                    message: role not found
      security:
      - jwt_auth:
        - write:admin
        - read:admin

components:
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example:
            status: error
            message: resource not found
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          examples:
            expired:
              value:
                status: error
                message: token expired
            notvalid:
              value:
                status: error
                message: token is not valid
    Forbidden:
      description: Access is not allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example:
            status: error
            message: permission denied
  schemas:
    Credentials:
      title: Credentials
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
        - username
        - password
    Passwords:
      title: Passwords
      type: object
      properties:
        old_password:
          type: string
          writeOnly: true
        new_password:
          type: string
          writeOnly: true
      required:
        - username
        - password
    Token:
      title: Token
      type: object
      properties:
        access_token:
          type: string
          title: access token
        refresh_token:
          type: string
          title: refresh token
    Response:
      title: Response
      type: object
      properties:
        status:
          type: string
          title: response status
        message:
          type: string
          title: response message
    UserData:
      title: UserData
      type: object
      properties:
        first_name:
          type: string
          title: first name
        last_name:
          type: string
          title: last name
        email:
          type: string
          title: email
        birth_date:
          type: string
          title: birth date
        phone:
          type: string
          title: phone
        city:
          type: string
          title: city
    UserDevice:
      title: UserDevice
      type: object
      properties:
        ip:
          type: string
          title: ip address
        user_agent:
          type: string
          title: browser user-agent
        created_at:
          type: string
          title: created date
    UserLogin:
      title: UserLogin
      type: object
      properties:
        login_date:
          type: string
          title: login date
        device:
          $ref: '#/components/schemas/UserDevice'
    UserLoginHistory:
      title: UserLoginHistory
      type: array
      items:
        type: object
        $ref: '#/components/schemas/UserLogin'
    Role:
      title: Role
      properties:
        id:
          type: string
          title: role uuid
        code:
          type: string
          title: role name
        description:
          type: string
          title: role detailed description
      required:
        - code
        - description
    UserRole:
      title: UserRole
      properties:
        id:
          type: string
          title: user_role uuid
        user_id:
          type: string
          title: user uuid
        role_id:
          type: string
          title: role uuid
    UserRoleRequest:
      title: UserRoleRequest
      properties:
        user_id:
          type: string
          title: user uuid
        role_ids:
          type: array
          items:
            type: string
            title: role uuids
    UserRoleResponse:
      title: UserRoleResponse
      type: array
      items:
        type: object
        $ref: '#/components/schemas/UserRole'

securitySchemes:
  jwt_auth:
    type: http
    scheme: bearer
    bearerFormat: JWT
